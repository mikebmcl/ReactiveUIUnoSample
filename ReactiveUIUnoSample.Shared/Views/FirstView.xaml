<Page
    x:Class="ReactiveUIUnoSample.Views.FirstView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:vms="using:ReactiveUIUnoSample.ViewModels"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    mc:Ignorable="d">
    <Grid Margin="8">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0"
                    Margin="0">
            <Button x:Name="NextPageButton"
                    Content="Next"
                    Margin="4" />
            <Button x:Name="AlternateNextPageButton"
                    Content="Alternate Next"
                    AutomationProperties.AutomationId="AlternateNextPageButton"
                    Margin="4" />
            <Button x:Name="TemperatureConversionsMainViewButton"
                    Content="Temperature Conversions"
                    Margin="4" />
        </StackPanel>
        <StackPanel Grid.Row="1"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch">
            <TextBlock Text="Hello, I'm first the view!" Margin="8" />
            <StackPanel Orientation="Horizontal">
                <TextBlock x:Name="EnterAmountTextBlock" Text="Enter currency amount:" Margin="8" VerticalAlignment="Center" />
                <!-- Note: You need to make sure to assign a unique AutomationProperties.AutomationId value for each control you might want to test with unit testing. The compiler will not verify uniqueness for you so it's up to you. It is not recommended that you assign a value to this that is the same as the x:Name of a different control because it's possible that the x:Name for that control might end up becoming something the test framework finds when looking for the control. See generally: https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/using-ui-automation-for-automated-testing . Also: https://platform.uno/blog/an-introduction-to-unit-testing-for-uno-platform-applications/ . Note that AutomationProperties.AutomationId is bindable, which can help a lot both with maintaining unique ids and with avoiding hard-coding ids in multiple places; here we use a static readonly property which we will use in the unit tests. Note also that AutomationProperties.Name overrides AutomationProperties.LabeledBy. For accessibility purposes, you should remove AutomationProperties.Name since the text in the control that LabeledBy is bound to is more descriptive and is what is being shown on the screen as the label for this text box. -->
                <TextBox x:Name="EnteredAmountTextBox" Height="35" Margin="8" AutomationProperties.Name="Enter Amount"
                         AutomationProperties.LabeledBy="{x:Bind EnterAmountTextBlock}" AutomationProperties.AutomationId="{x:Bind vms:FirstViewModel.EnteredAmountTextBoxAutomationId, Mode=OneTime}" />
            </StackPanel>
        </StackPanel>
    </Grid>
</Page>
