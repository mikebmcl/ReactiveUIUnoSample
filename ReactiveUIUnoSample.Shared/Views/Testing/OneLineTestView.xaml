<Page
    x:Class="ReactiveUIUnoSample.Views.Testing.OneLineTestView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ReactiveUIUnoSample.Views"
    xmlns:ifacetest="using:ReactiveUIUnoSample.Interfaces.Testing"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <ScrollViewer>
        <Grid x:Name="TestRootGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <StackPanel Margin="8" HorizontalAlignment="Center" Orientation="Vertical">
                <TextBlock x:Name="CurrentTestItemFirstLineTextBlock" HorizontalAlignment="Center" HorizontalTextAlignment="Center" />
            </StackPanel>

            <ItemsControl x:Name="AnswersItemsControl" Grid.Row="1" Margin="8">
                <!-- Note: It's important when modifying a container style to base it on the default style if one exists, otherwise you can end up with
                    missing styling elements such as the accent-colored indication of the selected item in this ListView. To determine if there is a
                    default style, check:
                         
                    https://github.com/microsoft/microsoft-ui-xaml/tree/main/dev/CommonStyles
                         
                    Usually if there is a default style its name will follow the pattern DefaultControlNameStyle such as DefaultListViewItemStyle as
                    below. The file names there are not one-to-one control mapped. For example, ListBox_themeresources.xaml contains styling for both
                    ListBox and ListBoxItem. The versioning is confusing; generally assume that files that end with themeresources.xaml are the ones
                    you will be working with and that the other versions are for backward compatibility or preview release testing. Uno might have a
                    style defined so you should check that as well, though normally it will be based on the default styles above with platform-specific
                    customizations:
                    
                    https://github.com/microsoft/microsoft-ui-xaml/tree/main/dev/CommonStyles
                    https://github.com/unoplatform/uno/tree/master/src/Uno.UI/UI/Xaml/Controls - A few controls have named defaults in .xaml files

                    As an example of what happens if you miss a default for a BasedOn that you should've had, uncomment the ListView.ItemContainerStyle
                    below and try running it both with and without the BasedOn. As noted above, without the BasedOn it will not have the selected visual
                    indicator (the little accent-colored marking to the left of the text). You can generally accomplish any styling you want using an
                    item template. This does have its uses though, so we have the demonstration below. However it will only work if you change the control
                    to be a ListView instead of an ItemsControl. This has other problems because except on UWP, customizing ListViewItem's style results
                    in the content not being displayed (in fact from the WASM at runtime, it appears to not add it). The customized ListViewItem style
                    is commented out in CommonResourceDictionary.xaml as a result though we aren't using ListView anywhere currently since we don't
                    need its added functionality.
                -->
                <!--<ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem" BasedOn="{StaticResource DefaultListViewItemStyle}">
                        <Setter Property="Margin" Value="4" />
                    </Style>
                </ListView.ItemContainerStyle>-->
                <ItemsControl.ItemTemplate>
                    <DataTemplate x:DataType="ifacetest:IThreeStateTestAnswer">
                        <ToggleButton Margin="4" Content="{x:Bind Text}" IsEnabled="{Binding IsEnabled, Mode=OneWay}" IsChecked="{Binding IsSelected, Mode=TwoWay}" HorizontalAlignment="Stretch" Command="{x:Bind PressCommand}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <Border Grid.Row="2" Margin="8" Padding="4">
                <TextBlock x:Name="ResultTextBlock" HorizontalAlignment="Stretch" HorizontalTextAlignment="Center" />
            </Border>
            <Button x:Name="DisableOneWrongAnswerButton" Grid.Row="3" Margin="10" Command="{x:Bind ViewModel.DisableOneWrongAnswerCommand}" />
            <Grid Grid.Row="4">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Button x:Name="CheckAnswerButton" Grid.Column="0" Margin="8,8,4,8" Command="{x:Bind ViewModel.CheckAnswerCommand}" />
                <Button x:Name="NextFinishButton" Grid.Column="1" Margin="4,8,8,8" Command="{x:Bind ViewModel.NextFinishCommand}" />
            </Grid>
        </Grid>
    </ScrollViewer>
</Page>
